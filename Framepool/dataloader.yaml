type: Dataset
args:
  intervals_file:
    doc: >
      bed3+<columns> file path containing bed3 and at least one column specifying the strand
      and at least one column specifying the id.
      Additional columns are (currently) ignored. Must be sorted
    example:
      url: https://zenodo.org/record/3584238/files/gencodev19_5utr_sorted_noprefix.bed?download=1
      md5: a4b313f2edd9b8bc9769d9bf50e74555
  fasta_file:
    doc: Reference genome FASTA file path
    example:
      url: https://zenodo.org/record/3584238/files/Homo_sapiens.GRCh37.74.dna.chromosome.22.fa?download=1
      md5: aa2bbce4da48357f9f05c2e63baacb69
  vcf_file:
    doc: >
      bgzipped vcf file with the variants that are to be investigated.
      Must be sorted and tabix index present.
      Filter out any variants with non-DNA symbols!
    example:
      url: https://zenodo.org/record/3584238/files/chr22utrVar1000gen_sorted_nodup.vcf.gz?download=1
      md5: 12c3482de03df39fffc99f554fbeab69
  vcf_file_tbi:
    doc: tabix index of vcf (just to make kipoi tests work - leave as None in normal usage)
    example:
      url: https://zenodo.org/record/3584238/files/chr22utrVar1000gen_sorted_nodup.vcf.gz.tbi?download=1
      md5: a27fc589f89b2af5b1b18455f2a842e0
  chr_order_file:
    doc: >
      file specifying the chromosome order (genome/faidx file)
      This must be consistent across vcf and bed file (fasta can deviate)
    example:
      url: https://zenodo.org/record/3584238/files/chrom_order_noprefix.txt?download=1
      md5: d7f7d3c6912c8687578ccb30805a76b5
  strand_column:
    doc: the column (1-based) specifying the strand (column 6 in a standard bed file)
  id_column:
    doc: the column (1-based) where seq-id information can be found (column 4 in standard bed)
  num_chr:
    doc: >
      Specify whether chromosome names are numeric or have chr prefix
      (true if numeric, false if with prefix). Must be consistent across all files!
    example: True


defined_as: dataloader.py::StrandedSequenceVariantDataloader

dependencies:
  channels:
    - bioconda
    - conda-forge
    - defaults
  conda:
    - python=3.6.7
    - bioconda::pybedtools>=0.8.0
    - bioconda::biopython
    - bioconda::bedtools>=2.28.0
    - bioconda::cyvcf2>=0.10.10
    - numpy>=1.16.2
    - pandas>=0.24.2
  pip:
    - kipoi
    - kipoiseq

info:
  doc: >
    This Dataloader requires the following input files:
    1. bed3+ where a specific user-specified column (>3, 1-based) of the bed denotes the strand
    and a specific user-specified column (>3, 1-based) of the bed denotes the transcript id
    (or some other id that explains which exons in the bed belong together to form one sequence).
    All columns of the bed, except the first three, the id and the strand, are ignored.
    2. fasta file that provides the reference genome
    3. bgzip compressed (single sample) vcf that provides the variants
    4. A chromosome order file (such as a fai file) that specifies the order of chromosomes
    (must be valid for all files)
    The bed and vcf must both be sorted (by position) and a tabix index must be present.
    (must lie in the same directory and have the same name + .tbi)
    The num_chr flag indicates whether chromosomes are listed numerically or with a chr prefix.
    This must be consistent across all input files!
    The dataloader finds all intervals in the bed which contain at least one variant in the vcf.
    It then joins intervals belonging to the same transcript, as specified by the id, to a single sequence.
    For these sequences, it extracts the reference sequence from the fasta file,
    injects the applicable variants and reverse complements according to the strand information.
    This means that if a vcf mixes variants from more than one patient, the results will not be
    meaningful. Split the vcf by patient and run the predictions seperately in this case!
    Returns the reference sequence and variant sequence as
    np.array([reference_sequence, variant_sequence]).
    Region metadata is additionally provided

output_schema:
  inputs:
    ref_seq:
      name: ref_seq
      doc: reference sequence of 5' UTR
      shape: ()
      special_type: DNAStringSeq
      associated_metadata: ranges
    alt_seq:
      name: alt_seq
      doc: alternative sequence of 5' UTR
      shape: ()
      special_type: DNAStringSeq
      associated_metadata: ranges, variants
  metadata:
    id:
      type: str
      doc: Id, e.g. ensembl transcript id
    chr:
      type: str
      doc: chromosome
    exon_positions:
      type: str
      doc: List of exon intervals that form utr
    strand:
      type: str
      doc: Strand of the utr
    variants:
      type: str
      doc: String representation of inserted variants
               